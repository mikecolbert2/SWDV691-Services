notes.txt


// if fields are blank, add error to the errors array
  if (!first_name || !last_name || !email || !password || !password2) {
    errors.push({ message: "Please enter all fields" });
  }

  // if the password is less than 6 characters, add error to the errors array
  if (password.length < 6) {
    errors.push({ message: "Password must be a least 6 characters long" });
  }

  // if the don't match, add error to the errors array
  if (password !== password2) {
    errors.push({ message: "Passwords do not match" });
  }

  // if there are errors in the error array, send them and user input back to the ui
  if (errors.length > 0) {
    /*res.render("register", {
        errors,
        first_name,
        last_name,
        email,
        password,
        password2,
      });*/
    res.json(errors);
  } else {
    // validation passed, are no errors

    // check to see if the email is already registered
    //   pool
    //     .query("SELECT * FROM users WHERE user_email = $1", [email])
    //     .then((res) => console.log(res.rows[0].email))
    //     .catch((err) => console.error("Error executing query", err.stack));
    // }

    // if (user.rows.length > 0) {
    //   return res.status(401).json("User already exist!");
    // }
    // if yes ... return message to user

    // if not ... continue ...
    // const newUser = new User({
    //   first_name,
    //   last_name,
    //   email,
    //   password,
    // });
    // hash the password

    