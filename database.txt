DROP DATABASE IF EXISTS time_detective;
CREATE DATABASE time_detective;


// -- Do not have permissions to create a new user on Heroku -- //
// CREATE USER timedet_app WITH ENCRYPTED PASSWORD 'pcOLdD]tMeN#A{KOZDx!A4lIb}UY78';
// GRANT CONNECT ON DATABASE dde0r75jqai4n4 TO timedet_app;
// GRANT SELECT, CREATE, DELETE, UPDATE ON SCHEMA public TO timedet_app;
//-------------------------------------------------------------//


DROP TABLE IF EXISTS roles;
CREATE TABLE roles
(
role_id INT GENERATED ALWAYS AS IDENTITY,
role_name VARCHAR(50) UNIQUE,
PRIMARY KEY(role_id)
);

INSERT INTO roles (role_name) VALUES ('user');
INSERT INTO roles (role_name) VALUES ('admin');

SELECT * FROM roles;

// user is 1
// admin is 2


CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

DROP TABLE IF EXISTS users;
CREATE TABLE users
(
user_id  uuid DEFAULT uuid_generate_v4 (),
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
email VARCHAR(200) UNIQUE NOT NULL,
password VARCHAR(200) NOT NULL,
role_id INT NOT NULL,
date_created TIMESTAMP NOT NULL,
last_login TIMESTAMP,
PRIMARY KEY(user_id),
CONSTRAINT fk_role
      FOREIGN KEY(role_id) 
	  REFERENCES roles(role_id)
	  ON DELETE SET NULL

);

INSERT INTO users (first_name, last_name, email, password, role_id, date_created, last_login) 
VALUES ('Mike', 'Colbert', 'mike@mike.com', 'abc123', 2, current_timestamp, current_timestamp);

INSERT INTO users (first_name, last_name, email, password, role_id, date_created, last_login) 
VALUES ('Amy', 'Colbert', 'amy@amy.com', 'abc123', 1, current_timestamp, current_timestamp);

SELECT * FROM users;


// test on delete if I delete a role - it should set the role_id column to null.



DROP TABLE IF EXISTS tasks;
CREATE TABLE tasks
(
task_id uuid DEFAULT uuid_generate_v4 (),
task_name VARCHAR(50) NOT NULL,
user_id uuid NOT NULL,
date_created TIMESTAMP NOT NULL,
PRIMARY KEY(task_id),
CONSTRAINT fk_user
      FOREIGN KEY(user_id) 
	  REFERENCES users(user_id)
	  ON DELETE CASCADE
);

INSERT INTO tasks (task_name, user_id, date_created)
VALUES ('Email', e12a6135-e294-4dc7-9117-770b7173f95a , current_timestamp);

INSERT INTO tasks (task_name, user_id, date_created)
VALUES ('Meetings', 776ba7ae-dbad-49ea-af06-a308f912f014 , current_timestamp);

SELECT * FROM tasks;


// test on delete if I delete a user - it should delete tasks associated with that users.
// build join query to show all tasks for a user


DROP TABLE IF EXISTS task_log;
CREATE TABLE task_log
(
log_id uuid DEFAULT uuid_generate_v4 (),
task_id uuid NOT NULL,
start_time TIMESTAMP NOT NULL,
end_time TIMESTAMP,
total_time TIME,
PRIMARY KEY(log_id),
CONSTRAINT fk_tasks
      FOREIGN KEY(task_id) 
	  REFERENCES tasks(task_id)
	  ON DELETE CASCADE
);


INSERT INTO task_log (task_id, start_time)
VALUES ('add83075-8dae-421d-8c24-067772df630d', current_timestamp);

UPDATE task_log
SET end_time = current_timestamp + INTERVAL '10 min'
WHERE log_id = '57d7cad8-c554-4eaf-8563-bdafaff4ecb9';

INSERT INTO task_log (task_id, start_time)
VALUES ('dc0f62d9-f05d-4d3e-a015-fd36832ff119', current_timestamp);


// total time is not working here::::::::
UPDATE task_log
SET end_time = current_timestamp, total_time = (end_time::TIME - start_time::TIME)
WHERE log_id = '451218c3-4bfd-4817-bf29-17f8050dc9f5';

SELECT * FROM task_log;


SELECT SUM (total_time) AS total
FROM task_log
//WHERE task_id = 'xx'




// test on delete if I delete a task - it should delete task_log entries associated with that task.
// build join query to show all task_log entries for a task
// build join query to show all task_log entries for a user




SELECT task_log.log_id, users.email, tasks.task_name, task_log.total_time
FROM task_log
INNER JOIN tasks ON task_log.task_id = tasks.task_id
INNER JOIN users ON tasks.user_id = users.user_id;



SELECT users.email, tasks.task_name
FROM tasks
INNER JOIN users ON tasks.user_id = users.user_id;













CREATE FUNCTION last_upd_trig() RETURNS trigger
   LANGUAGE plpgsql AS
$$BEGIN
   NEW.end_time := current_timestamp;
   RETURN NEW;
END;$$;

CREATE TRIGGER last_upd_trigger
   BEFORE UPDATE ON task_log    //optionally BEFORE INSERT OR UPDATE
   FOR EACH ROW
   EXECUTE PROCEDURE last_upd_trig();



tasks
task_id: uuid
task_name
user_id
date_created


task_log
log_id : uuid
task_id
start_time
end_time
total_time



